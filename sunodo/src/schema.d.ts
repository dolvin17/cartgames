/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


import type { Address, Hex } from 'viem';

export interface paths {
  "/finish": {
    /**
     * Finish and get next request
     * @description The DApp backend should call this method to start processing rollup requests.
     * The Rollup HTTP Server returns the next rollup request in the response body.
     *
     * The possible values for the request_type field are 'advance_state' and 'inspect_state'.
     * The data field contains the rollup request input data.
     * For advance-state requests, the input data contains the advance-state metadata and the payload.
     * For inspect-state requests, the input data contains only the payload.
     *
     * After processing a rollup request, the DApp back-end should call again the finish method.
     * For advance-state requests, depending on the result of the request processing, it should fill the status field of the request body with 'accept' or 'reject'.
     * The Rollup HTTP Server ignores the content of the status field for the first finish request and after an inspect-state request.
     *
     * If the advance-state request is rejected, the vouchers and notices are discarded.
     * In contrast, reports are not discarded in case of rejection.
     * When running inside a Cartesi machine, the Cartesi Server Manager reverts the entire state of the machine to what it was before receiving the request.
     *
     * During a finish call, the next rollup request might not be immediately available.
     * When the DApp backend and the Rollup HTTP Server are running inside a Cartesi machine, the Cartesi Server Manager pauses the whole machine execution until the next request is ready.
     * When running in host mode, the Rollup HTTP Server returns the status code 202 after 10 seconds to avoid the connection timing out.
     * When the Rollup HTTP Server returns 202, the DApp backend should retry the call to finish passing the same arguments as before.
     */
    post: operations["finish"];
  };
  "/voucher": {
    /**
     * Add a new voucher
     * @description The DApp backend can call this method to add a new voucher when processing an advance-state request.
     * Vouchers are collateral effects actionable in the blockchain.
     * Between calls to the finish method, the voucher method can be called up to 32k times.
     *
     * The returned value is the index of the voucher for the current advance-state request.
     * In other words, the index counting restarts at every request.
     */
    post: operations["addVoucher"];
  };
  "/notice": {
    /**
     * Add a new notice
     * @description The DApp backend can call this method to add a new notice when processing the advance-state request.
     * A notice describes any changes to the internal state of the DApp that may be relevant to the blockchain.
     * Between calls to the finish method, the notice method can be called up to 32k times.
     *
     * The returned value is the index of the notice for the current advance request.
     * In other words, the index counting restarts at every request.
     */
    post: operations["addNotice"];
  };
  "/report": {
    /**
     * Add a new report
     * @description The DApp can call this method to add a new report for the given rollup request.
     * A report can be a diagnostic or a log; reports are not discarded when a request is rejected.
     * Between calls to the finish method, the report method can be called any number of times.
     */
    post: operations["addReport"];
  };
  "/exception": {
    /**
     * Register an exception
     * @description The DApp should call this method when it cannot proceed with the request processing after an exception happens.
     * This method should be the last method ever called by the DApp backend while processing a request.
     *
     * When running in production mode, the Cartesi Server Manager pauses the Cartesi Machine and reverts the entire state of the machine to what it was before receiving the request.
     * No HTTP status code will be sent or received.
     *
     * When running in host mode, the Rollup HTTP Server returns the status code 200.
     * In both cases, the input will be skipped with the reason EXCEPTION and the exception message will be forwarded.
     */
    post: operations["registerException"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Finish: {
      /**
       * @example accept
       * @enum {string}
       */
      status: "accept" | "reject";
    };
    RollupRequest: {
      /**
       * @example advance_state
       * @enum {string}
       */
      request_type: "advance_state" | "inspect_state";
      data: components["schemas"]["Advance"] | components["schemas"]["Inspect"];
    };
    Advance: {
      metadata: components["schemas"]["Metadata"];
      payload: components["schemas"]["Payload"];
    };
    Metadata: {
      /**
       * Format: address
       * @description 20-byte address of the account that submitted the input.
       * @example 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
       */
      msg_sender: Address;
      /**
       * Format: uint64
       * @description Deprecated. Always receives 0.
       * @example 0
       */
      epoch_index: number;
      /**
       * Format: uint64
       * @description Input index starting from genesis.
       * @example 123
       */
      input_index: number;
      /**
       * Format: uint64
       * @description Block number when input was posted.
       * @example 10000000
       */
      block_number: number;
      /**
       * Format: uint64
       * @description Unix timestamp of block in milliseconds.
       * @example 1588598533000
       */
      timestamp: number;
    };
    /**
     * Format: hex
     * @description The payload is in the Ethereum hex binary format.
     * The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
     * For instance, '0xdeadbeef' corresponds to a payload with length 4 and bytes 222, 173, 190, 175.
     * An empty payload is represented by the string '0x'.
     *
     * @example 0xdeadbeef
     */
    Payload: Hex;
    Inspect: {
      payload: components["schemas"]["Payload"];
    };
    Voucher: {
      /**
       * Format: address
       * @description 20-byte address of the destination contract for which the payload will be sent.
       * @example 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
       */
      destination: Address;
      /**
       * @description String in Ethereum hex binary format describing a method call to be executed by the destination contract.
       * The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
       * For instance, '0xcdcd77c0' corresponds to a payload with length 4 and bytes 205, 205, 119, 192.
       * To describe the method call, the payload should consist of a function selector (method identifier) followed
       * by its ABI-encoded arguments.
       * ref: https://docs.soliditylang.org/en/v0.8.19/abi-spec.html
       *
       * @example 0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001
       */
      payload: string;
    };
    Notice: {
      payload: components["schemas"]["Payload"];
    };
    Report: {
      payload: components["schemas"]["Payload"];
    };
    Exception: {
      payload: components["schemas"]["Payload"];
    };
    IndexResponse: {
      /**
       * Format: uint64
       * @description Position in the Merkle tree.
       * @example 123
       */
      index: number;
    };
    /**
     * @description Detailed error message.
     * @example The request could not be understood by the server due to malformed syntax
     */
    Error: string;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Finish and get next request
   * @description The DApp backend should call this method to start processing rollup requests.
   * The Rollup HTTP Server returns the next rollup request in the response body.
   *
   * The possible values for the request_type field are 'advance_state' and 'inspect_state'.
   * The data field contains the rollup request input data.
   * For advance-state requests, the input data contains the advance-state metadata and the payload.
   * For inspect-state requests, the input data contains only the payload.
   *
   * After processing a rollup request, the DApp back-end should call again the finish method.
   * For advance-state requests, depending on the result of the request processing, it should fill the status field of the request body with 'accept' or 'reject'.
   * The Rollup HTTP Server ignores the content of the status field for the first finish request and after an inspect-state request.
   *
   * If the advance-state request is rejected, the vouchers and notices are discarded.
   * In contrast, reports are not discarded in case of rejection.
   * When running inside a Cartesi machine, the Cartesi Server Manager reverts the entire state of the machine to what it was before receiving the request.
   *
   * During a finish call, the next rollup request might not be immediately available.
   * When the DApp backend and the Rollup HTTP Server are running inside a Cartesi machine, the Cartesi Server Manager pauses the whole machine execution until the next request is ready.
   * When running in host mode, the Rollup HTTP Server returns the status code 202 after 10 seconds to avoid the connection timing out.
   * When the Rollup HTTP Server returns 202, the DApp backend should retry the call to finish passing the same arguments as before.
   */
  finish: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Finish"];
      };
    };
    responses: {
      /** @description Finish accepted and next rollup request returned. */
      200: {
        content: {
          "application/json": components["schemas"]["RollupRequest"];
        };
      };
      /** @description Finish accepted but try again to obtain the next request. */
      202: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "text/plain": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Add a new voucher
   * @description The DApp backend can call this method to add a new voucher when processing an advance-state request.
   * Vouchers are collateral effects actionable in the blockchain.
   * Between calls to the finish method, the voucher method can be called up to 32k times.
   *
   * The returned value is the index of the voucher for the current advance-state request.
   * In other words, the index counting restarts at every request.
   */
  addVoucher: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Voucher"];
      };
    };
    responses: {
      /** @description Created the voucher. */
      200: {
        content: {
          "application/json": components["schemas"]["IndexResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "text/plain": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Add a new notice
   * @description The DApp backend can call this method to add a new notice when processing the advance-state request.
   * A notice describes any changes to the internal state of the DApp that may be relevant to the blockchain.
   * Between calls to the finish method, the notice method can be called up to 32k times.
   *
   * The returned value is the index of the notice for the current advance request.
   * In other words, the index counting restarts at every request.
   */
  addNotice: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Notice"];
      };
    };
    responses: {
      /** @description Created the notice. */
      200: {
        content: {
          "application/json": components["schemas"]["IndexResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "text/plain": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Add a new report
   * @description The DApp can call this method to add a new report for the given rollup request.
   * A report can be a diagnostic or a log; reports are not discarded when a request is rejected.
   * Between calls to the finish method, the report method can be called any number of times.
   */
  addReport: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Report"];
      };
    };
    responses: {
      /** @description Created the report. */
      200: {
        content: never;
      };
      /** @description Error response. */
      default: {
        content: {
          "text/plain": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Register an exception
   * @description The DApp should call this method when it cannot proceed with the request processing after an exception happens.
   * This method should be the last method ever called by the DApp backend while processing a request.
   *
   * When running in production mode, the Cartesi Server Manager pauses the Cartesi Machine and reverts the entire state of the machine to what it was before receiving the request.
   * No HTTP status code will be sent or received.
   *
   * When running in host mode, the Rollup HTTP Server returns the status code 200.
   * In both cases, the input will be skipped with the reason EXCEPTION and the exception message will be forwarded.
   */
  registerException: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Exception"];
      };
    };
    responses: {
      /** @description Accepted the exception throw. */
      200: {
        content: never;
      };
      /** @description Error response. */
      default: {
        content: {
          "text/plain": components["schemas"]["Error"];
        };
      };
    };
  };
}
